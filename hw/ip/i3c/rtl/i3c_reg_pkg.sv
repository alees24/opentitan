// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package i3c_reg_pkg;

  // Param list
  parameter int NumAlerts = 1;

  // Address widths within the block
  parameter int BlockAw = 12;

  // Number of registers for every interface
  parameter int NumRegs = 22;

  // Alert indices
  typedef enum int {
    AlertFatalFaultIdx = 0
  } i3c_alert_idx_t;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {
      logic        q;
    } error;
    struct packed {
      logic        q;
    } done;
  } i3c_reg2hw_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } error;
    struct packed {
      logic        q;
    } done;
  } i3c_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } error;
    struct packed {
      logic        q;
      logic        qe;
    } done;
  } i3c_reg2hw_intr_test_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } i3c_reg2hw_alert_test_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } clkdiv;
    struct packed {
      logic        q;
    } hdr_ddr_en;
    struct packed {
      logic        q;
    } targ_rx_en;
    struct packed {
      logic        q;
    } targ_tx_en;
    struct packed {
      logic        q;
    } ctrl_rx_en;
    struct packed {
      logic        q;
    } ctrl_tx_en;
  } i3c_reg2hw_ctrl_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        re;
    } rx_idle;
    struct packed {
      logic        q;
      logic        re;
    } tx_idle;
  } i3c_reg2hw_status_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } sda_hk_en;
    struct packed {
      logic        q;
    } scl_hk_en;
  } i3c_reg2hw_phy_config_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } max_addr;
    struct packed {
      logic [15:0] q;
    } min_addr;
  } i3c_reg2hw_ctrl_txbuf_config_reg_t;

  typedef struct packed {
    logic [15:0] q;
  } i3c_reg2hw_ctrl_txbuf_wptr_reg_t;

  typedef struct packed {
    logic [15:0] q;
  } i3c_reg2hw_ctrl_txbuf_rptr_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } max_addr;
    struct packed {
      logic [15:0] q;
    } min_addr;
  } i3c_reg2hw_ctrl_rxbuf_config_reg_t;

  typedef struct packed {
    logic [15:0] q;
  } i3c_reg2hw_ctrl_rxbuf_wptr_reg_t;

  typedef struct packed {
    logic [15:0] q;
  } i3c_reg2hw_ctrl_rxbuf_rptr_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } max_addr;
    struct packed {
      logic [15:0] q;
    } min_addr;
  } i3c_reg2hw_targ_txbuf_config_reg_t;

  typedef struct packed {
    logic [15:0] q;
  } i3c_reg2hw_targ_txbuf_wptr_reg_t;

  typedef struct packed {
    logic [15:0] q;
  } i3c_reg2hw_targ_txbuf_rptr_reg_t;

  typedef struct packed {
    struct packed {
      logic [15:0] q;
    } max_addr;
    struct packed {
      logic [15:0] q;
    } min_addr;
  } i3c_reg2hw_targ_rxbuf_config_reg_t;

  typedef struct packed {
    logic [15:0] q;
  } i3c_reg2hw_targ_rxbuf_wptr_reg_t;

  typedef struct packed {
    logic [15:0] q;
  } i3c_reg2hw_targ_rxbuf_rptr_reg_t;

  typedef struct packed {
    struct packed {
      logic [6:0]  q;
    } addr1;
    struct packed {
      logic [6:0]  q;
    } addr0;
  } i3c_reg2hw_targ_addr_match_reg_t;

  typedef struct packed {
    struct packed {
      logic [6:0]  q;
    } mask1;
    struct packed {
      logic [6:0]  q;
    } mask0;
  } i3c_reg2hw_targ_addr_mask_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } error;
    struct packed {
      logic        d;
      logic        de;
    } done;
  } i3c_hw2reg_intr_state_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
    } rx_idle;
    struct packed {
      logic        d;
    } tx_idle;
  } i3c_hw2reg_status_reg_t;

  typedef struct packed {
    logic [15:0] d;
    logic        de;
  } i3c_hw2reg_ctrl_txbuf_rptr_reg_t;

  typedef struct packed {
    logic [15:0] d;
    logic        de;
  } i3c_hw2reg_ctrl_rxbuf_wptr_reg_t;

  typedef struct packed {
    logic [15:0] d;
    logic        de;
  } i3c_hw2reg_targ_txbuf_rptr_reg_t;

  typedef struct packed {
    logic [15:0] d;
    logic        de;
  } i3c_hw2reg_targ_rxbuf_wptr_reg_t;

  typedef struct packed {
    struct packed {
      logic [7:0]  d;
    } rxlvl;
    struct packed {
      logic [7:0]  d;
    } txlvl;
  } i3c_hw2reg_buffer_status_reg_t;

  // Register -> HW type
  typedef struct packed {
    i3c_reg2hw_intr_state_reg_t intr_state; // [320:319]
    i3c_reg2hw_intr_enable_reg_t intr_enable; // [318:317]
    i3c_reg2hw_intr_test_reg_t intr_test; // [316:313]
    i3c_reg2hw_alert_test_reg_t alert_test; // [312:311]
    i3c_reg2hw_ctrl_reg_t ctrl; // [310:290]
    i3c_reg2hw_status_reg_t status; // [289:286]
    i3c_reg2hw_phy_config_reg_t phy_config; // [285:284]
    i3c_reg2hw_ctrl_txbuf_config_reg_t ctrl_txbuf_config; // [283:252]
    i3c_reg2hw_ctrl_txbuf_wptr_reg_t ctrl_txbuf_wptr; // [251:236]
    i3c_reg2hw_ctrl_txbuf_rptr_reg_t ctrl_txbuf_rptr; // [235:220]
    i3c_reg2hw_ctrl_rxbuf_config_reg_t ctrl_rxbuf_config; // [219:188]
    i3c_reg2hw_ctrl_rxbuf_wptr_reg_t ctrl_rxbuf_wptr; // [187:172]
    i3c_reg2hw_ctrl_rxbuf_rptr_reg_t ctrl_rxbuf_rptr; // [171:156]
    i3c_reg2hw_targ_txbuf_config_reg_t targ_txbuf_config; // [155:124]
    i3c_reg2hw_targ_txbuf_wptr_reg_t targ_txbuf_wptr; // [123:108]
    i3c_reg2hw_targ_txbuf_rptr_reg_t targ_txbuf_rptr; // [107:92]
    i3c_reg2hw_targ_rxbuf_config_reg_t targ_rxbuf_config; // [91:60]
    i3c_reg2hw_targ_rxbuf_wptr_reg_t targ_rxbuf_wptr; // [59:44]
    i3c_reg2hw_targ_rxbuf_rptr_reg_t targ_rxbuf_rptr; // [43:28]
    i3c_reg2hw_targ_addr_match_reg_t targ_addr_match; // [27:14]
    i3c_reg2hw_targ_addr_mask_reg_t targ_addr_mask; // [13:0]
  } i3c_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    i3c_hw2reg_intr_state_reg_t intr_state; // [89:86]
    i3c_hw2reg_status_reg_t status; // [85:84]
    i3c_hw2reg_ctrl_txbuf_rptr_reg_t ctrl_txbuf_rptr; // [83:67]
    i3c_hw2reg_ctrl_rxbuf_wptr_reg_t ctrl_rxbuf_wptr; // [66:50]
    i3c_hw2reg_targ_txbuf_rptr_reg_t targ_txbuf_rptr; // [49:33]
    i3c_hw2reg_targ_rxbuf_wptr_reg_t targ_rxbuf_wptr; // [32:16]
    i3c_hw2reg_buffer_status_reg_t buffer_status; // [15:0]
  } i3c_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] I3C_INTR_STATE_OFFSET = 12'h 0;
  parameter logic [BlockAw-1:0] I3C_INTR_ENABLE_OFFSET = 12'h 4;
  parameter logic [BlockAw-1:0] I3C_INTR_TEST_OFFSET = 12'h 8;
  parameter logic [BlockAw-1:0] I3C_ALERT_TEST_OFFSET = 12'h c;
  parameter logic [BlockAw-1:0] I3C_CTRL_OFFSET = 12'h 10;
  parameter logic [BlockAw-1:0] I3C_STATUS_OFFSET = 12'h 14;
  parameter logic [BlockAw-1:0] I3C_PHY_CONFIG_OFFSET = 12'h 18;
  parameter logic [BlockAw-1:0] I3C_CTRL_TXBUF_CONFIG_OFFSET = 12'h 1c;
  parameter logic [BlockAw-1:0] I3C_CTRL_TXBUF_WPTR_OFFSET = 12'h 20;
  parameter logic [BlockAw-1:0] I3C_CTRL_TXBUF_RPTR_OFFSET = 12'h 24;
  parameter logic [BlockAw-1:0] I3C_CTRL_RXBUF_CONFIG_OFFSET = 12'h 28;
  parameter logic [BlockAw-1:0] I3C_CTRL_RXBUF_WPTR_OFFSET = 12'h 2c;
  parameter logic [BlockAw-1:0] I3C_CTRL_RXBUF_RPTR_OFFSET = 12'h 30;
  parameter logic [BlockAw-1:0] I3C_TARG_TXBUF_CONFIG_OFFSET = 12'h 34;
  parameter logic [BlockAw-1:0] I3C_TARG_TXBUF_WPTR_OFFSET = 12'h 38;
  parameter logic [BlockAw-1:0] I3C_TARG_TXBUF_RPTR_OFFSET = 12'h 3c;
  parameter logic [BlockAw-1:0] I3C_TARG_RXBUF_CONFIG_OFFSET = 12'h 40;
  parameter logic [BlockAw-1:0] I3C_TARG_RXBUF_WPTR_OFFSET = 12'h 44;
  parameter logic [BlockAw-1:0] I3C_TARG_RXBUF_RPTR_OFFSET = 12'h 48;
  parameter logic [BlockAw-1:0] I3C_BUFFER_STATUS_OFFSET = 12'h 4c;
  parameter logic [BlockAw-1:0] I3C_TARG_ADDR_MATCH_OFFSET = 12'h 50;
  parameter logic [BlockAw-1:0] I3C_TARG_ADDR_MASK_OFFSET = 12'h 54;

  // Reset values for hwext registers and their fields
  parameter logic [1:0] I3C_INTR_TEST_RESVAL = 2'h 0;
  parameter logic [0:0] I3C_INTR_TEST_DONE_RESVAL = 1'h 0;
  parameter logic [0:0] I3C_INTR_TEST_ERROR_RESVAL = 1'h 0;
  parameter logic [0:0] I3C_ALERT_TEST_RESVAL = 1'h 0;
  parameter logic [0:0] I3C_ALERT_TEST_FATAL_FAULT_RESVAL = 1'h 0;
  parameter logic [1:0] I3C_STATUS_RESVAL = 2'h 0;
  parameter logic [23:0] I3C_BUFFER_STATUS_RESVAL = 24'h 0;

  // Window parameters
  parameter logic [BlockAw-1:0] I3C_BUFFER_OFFSET = 12'h 800;
  parameter int unsigned        I3C_BUFFER_SIZE   = 'h 800;
  parameter int unsigned        I3C_BUFFER_IDX    = 0;

  // Register index
  typedef enum int {
    I3C_INTR_STATE,
    I3C_INTR_ENABLE,
    I3C_INTR_TEST,
    I3C_ALERT_TEST,
    I3C_CTRL,
    I3C_STATUS,
    I3C_PHY_CONFIG,
    I3C_CTRL_TXBUF_CONFIG,
    I3C_CTRL_TXBUF_WPTR,
    I3C_CTRL_TXBUF_RPTR,
    I3C_CTRL_RXBUF_CONFIG,
    I3C_CTRL_RXBUF_WPTR,
    I3C_CTRL_RXBUF_RPTR,
    I3C_TARG_TXBUF_CONFIG,
    I3C_TARG_TXBUF_WPTR,
    I3C_TARG_TXBUF_RPTR,
    I3C_TARG_RXBUF_CONFIG,
    I3C_TARG_RXBUF_WPTR,
    I3C_TARG_RXBUF_RPTR,
    I3C_BUFFER_STATUS,
    I3C_TARG_ADDR_MATCH,
    I3C_TARG_ADDR_MASK
  } i3c_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] I3C_PERMIT [22] = '{
    4'b 0001, // index[ 0] I3C_INTR_STATE
    4'b 0001, // index[ 1] I3C_INTR_ENABLE
    4'b 0001, // index[ 2] I3C_INTR_TEST
    4'b 0001, // index[ 3] I3C_ALERT_TEST
    4'b 1111, // index[ 4] I3C_CTRL
    4'b 0001, // index[ 5] I3C_STATUS
    4'b 0001, // index[ 6] I3C_PHY_CONFIG
    4'b 1111, // index[ 7] I3C_CTRL_TXBUF_CONFIG
    4'b 0011, // index[ 8] I3C_CTRL_TXBUF_WPTR
    4'b 0011, // index[ 9] I3C_CTRL_TXBUF_RPTR
    4'b 1111, // index[10] I3C_CTRL_RXBUF_CONFIG
    4'b 0011, // index[11] I3C_CTRL_RXBUF_WPTR
    4'b 0011, // index[12] I3C_CTRL_RXBUF_RPTR
    4'b 1111, // index[13] I3C_TARG_TXBUF_CONFIG
    4'b 0011, // index[14] I3C_TARG_TXBUF_WPTR
    4'b 0011, // index[15] I3C_TARG_TXBUF_RPTR
    4'b 1111, // index[16] I3C_TARG_RXBUF_CONFIG
    4'b 0011, // index[17] I3C_TARG_RXBUF_WPTR
    4'b 0011, // index[18] I3C_TARG_RXBUF_RPTR
    4'b 0111, // index[19] I3C_BUFFER_STATUS
    4'b 0011, // index[20] I3C_TARG_ADDR_MATCH
    4'b 0011  // index[21] I3C_TARG_ADDR_MASK
  };

endpackage
