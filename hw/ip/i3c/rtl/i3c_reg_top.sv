// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module i3c_reg_top
  # (
    parameter bit          EnableRacl           = 1'b0,
    parameter bit          RaclErrorRsp         = 1'b1,
    parameter top_racl_pkg::racl_policy_sel_t RaclPolicySelVec[i3c_reg_pkg::NumRegs] =
      '{i3c_reg_pkg::NumRegs{0}}
  ) (
  input clk_i,
  input rst_ni,
  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o,

  // Output port for window
  output tlul_pkg::tl_h2d_t tl_win_o,
  input  tlul_pkg::tl_d2h_t tl_win_i,

  // To HW
  output i3c_reg_pkg::i3c_reg2hw_t reg2hw, // Write
  input  i3c_reg_pkg::i3c_hw2reg_t hw2reg, // Read

  // RACL interface
  input  top_racl_pkg::racl_policy_vec_t racl_policies_i,
  output top_racl_pkg::racl_error_log_t  racl_error_o,

  // Integrity check errors
  output logic intg_err_o
);

  import i3c_reg_pkg::* ;

  localparam int AW = 12;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // incoming payload check
  logic intg_err;
  tlul_cmd_intg_chk u_chk (
    .tl_i(tl_i),
    .err_o(intg_err)
  );

  // also check for spurious write enables
  logic reg_we_err;
  logic [21:0] reg_we_check;
  prim_reg_we_check #(
    .OneHotWidth(22)
  ) u_prim_reg_we_check (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .oh_i  (reg_we_check),
    .en_i  (reg_we && !addrmiss),
    .err_o (reg_we_err)
  );

  logic err_q;
  always_ff @(posedge clk_i or negedge rst_ni) begin
    if (!rst_ni) begin
      err_q <= '0;
    end else if (intg_err || reg_we_err) begin
      err_q <= 1'b1;
    end
  end

  // integrity error output is permanent and should be used for alert generation
  // register errors are transactional
  assign intg_err_o = err_q | intg_err | reg_we_err;

  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(1),
    .EnableDataIntgGen(1)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  tlul_pkg::tl_h2d_t tl_socket_h2d [2];
  tlul_pkg::tl_d2h_t tl_socket_d2h [2];

  logic [0:0] reg_steer;

  // socket_1n connection
  assign tl_reg_h2d = tl_socket_h2d[1];
  assign tl_socket_d2h[1] = tl_reg_d2h;

  assign tl_win_o = tl_socket_h2d[0];
  assign tl_socket_d2h[0] = tl_win_i;

  // Create Socket_1n
  tlul_socket_1n #(
    .N            (2),
    .HReqPass     (1'b1),
    .HRspPass     (1'b1),
    .DReqPass     ({2{1'b1}}),
    .DRspPass     ({2{1'b1}}),
    .HReqDepth    (4'h0),
    .HRspDepth    (4'h0),
    .DReqDepth    ({2{4'h0}}),
    .DRspDepth    ({2{4'h0}}),
    .ExplicitErrs (1'b0)
  ) u_socket (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),
    .tl_h_i (tl_i),
    .tl_h_o (tl_o_pre),
    .tl_d_o (tl_socket_h2d),
    .tl_d_i (tl_socket_d2h),
    .dev_select_i (reg_steer)
  );

  // Create steering logic
  always_comb begin
    reg_steer =
        tl_i.a_address[AW-1:0] inside {[2048:4095]} ? 1'd0 :
        // Default set to register
        1'd1;

    // Override this in case of an integrity error
    if (intg_err) begin
      reg_steer = 1'd1;
    end
  end

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    // Translate RACL error to TLUL error if enabled
    .error_i (reg_error | (RaclErrorRsp & racl_error_o.valid))
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = addrmiss | wr_err | intg_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_we;
  logic intr_state_done_qs;
  logic intr_state_done_wd;
  logic intr_state_error_qs;
  logic intr_state_error_wd;
  logic intr_enable_we;
  logic intr_enable_done_qs;
  logic intr_enable_done_wd;
  logic intr_enable_error_qs;
  logic intr_enable_error_wd;
  logic intr_test_we;
  logic intr_test_done_wd;
  logic intr_test_error_wd;
  logic alert_test_we;
  logic alert_test_wd;
  logic ctrl_we;
  logic ctrl_ctrl_tx_en_qs;
  logic ctrl_ctrl_tx_en_wd;
  logic ctrl_ctrl_rx_en_qs;
  logic ctrl_ctrl_rx_en_wd;
  logic ctrl_targ_tx_en_qs;
  logic ctrl_targ_tx_en_wd;
  logic ctrl_targ_rx_en_qs;
  logic ctrl_targ_rx_en_wd;
  logic ctrl_hdr_ddr_en_qs;
  logic ctrl_hdr_ddr_en_wd;
  logic [15:0] ctrl_clkdiv_qs;
  logic [15:0] ctrl_clkdiv_wd;
  logic status_re;
  logic status_tx_idle_qs;
  logic status_rx_idle_qs;
  logic phy_config_we;
  logic phy_config_scl_hk_en_qs;
  logic phy_config_scl_hk_en_wd;
  logic phy_config_sda_hk_en_qs;
  logic phy_config_sda_hk_en_wd;
  logic ctrl_txbuf_config_we;
  logic [15:0] ctrl_txbuf_config_min_addr_qs;
  logic [15:0] ctrl_txbuf_config_min_addr_wd;
  logic [15:0] ctrl_txbuf_config_max_addr_qs;
  logic [15:0] ctrl_txbuf_config_max_addr_wd;
  logic ctrl_txbuf_wptr_we;
  logic [15:0] ctrl_txbuf_wptr_qs;
  logic [15:0] ctrl_txbuf_wptr_wd;
  logic ctrl_txbuf_rptr_we;
  logic [15:0] ctrl_txbuf_rptr_qs;
  logic [15:0] ctrl_txbuf_rptr_wd;
  logic ctrl_rxbuf_config_we;
  logic [15:0] ctrl_rxbuf_config_min_addr_qs;
  logic [15:0] ctrl_rxbuf_config_min_addr_wd;
  logic [15:0] ctrl_rxbuf_config_max_addr_qs;
  logic [15:0] ctrl_rxbuf_config_max_addr_wd;
  logic ctrl_rxbuf_wptr_we;
  logic [15:0] ctrl_rxbuf_wptr_qs;
  logic [15:0] ctrl_rxbuf_wptr_wd;
  logic ctrl_rxbuf_rptr_we;
  logic [15:0] ctrl_rxbuf_rptr_qs;
  logic [15:0] ctrl_rxbuf_rptr_wd;
  logic targ_txbuf_config_we;
  logic [15:0] targ_txbuf_config_min_addr_qs;
  logic [15:0] targ_txbuf_config_min_addr_wd;
  logic [15:0] targ_txbuf_config_max_addr_qs;
  logic [15:0] targ_txbuf_config_max_addr_wd;
  logic targ_txbuf_wptr_we;
  logic [15:0] targ_txbuf_wptr_qs;
  logic [15:0] targ_txbuf_wptr_wd;
  logic targ_txbuf_rptr_we;
  logic [15:0] targ_txbuf_rptr_qs;
  logic [15:0] targ_txbuf_rptr_wd;
  logic targ_rxbuf_config_we;
  logic [15:0] targ_rxbuf_config_min_addr_qs;
  logic [15:0] targ_rxbuf_config_min_addr_wd;
  logic [15:0] targ_rxbuf_config_max_addr_qs;
  logic [15:0] targ_rxbuf_config_max_addr_wd;
  logic targ_rxbuf_wptr_we;
  logic [15:0] targ_rxbuf_wptr_qs;
  logic [15:0] targ_rxbuf_wptr_wd;
  logic targ_rxbuf_rptr_we;
  logic [15:0] targ_rxbuf_rptr_qs;
  logic [15:0] targ_rxbuf_rptr_wd;
  logic buffer_status_re;
  logic [7:0] buffer_status_txlvl_qs;
  logic [7:0] buffer_status_rxlvl_qs;
  logic targ_addr_match_we;
  logic [6:0] targ_addr_match_addr0_qs;
  logic [6:0] targ_addr_match_addr0_wd;
  logic [6:0] targ_addr_match_addr1_qs;
  logic [6:0] targ_addr_match_addr1_wd;
  logic targ_addr_mask_we;
  logic [6:0] targ_addr_mask_mask0_qs;
  logic [6:0] targ_addr_mask_mask0_wd;
  logic [6:0] targ_addr_mask_mask1_qs;
  logic [6:0] targ_addr_mask_mask1_wd;

  // Register instances
  // R[intr_state]: V(False)
  //   F[done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_done_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.done.de),
    .d      (hw2reg.intr_state.done.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_done_qs)
  );

  //   F[error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_error_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.error.de),
    .d      (hw2reg.intr_state.error.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.error.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_error_qs)
  );


  // R[intr_enable]: V(False)
  //   F[done]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_done (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_done_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.done.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_done_qs)
  );

  //   F[error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.error.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_error_qs)
  );


  // R[intr_test]: V(True)
  logic intr_test_qe;
  logic [1:0] intr_test_flds_we;
  assign intr_test_qe = &intr_test_flds_we;
  //   F[done]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_done (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_done_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[0]),
    .q      (reg2hw.intr_test.done.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.done.qe = intr_test_qe;

  //   F[error]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_error (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_error_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[1]),
    .q      (reg2hw.intr_test.error.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.error.qe = intr_test_qe;


  // R[alert_test]: V(True)
  logic alert_test_qe;
  logic [0:0] alert_test_flds_we;
  assign alert_test_qe = &alert_test_flds_we;
  prim_subreg_ext #(
    .DW    (1)
  ) u_alert_test (
    .re     (1'b0),
    .we     (alert_test_we),
    .wd     (alert_test_wd),
    .d      ('0),
    .qre    (),
    .qe     (alert_test_flds_we[0]),
    .q      (reg2hw.alert_test.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.alert_test.qe = alert_test_qe;


  // R[ctrl]: V(False)
  //   F[ctrl_tx_en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ctrl_ctrl_tx_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_we),
    .wd     (ctrl_ctrl_tx_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.ctrl_tx_en.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_ctrl_tx_en_qs)
  );

  //   F[ctrl_rx_en]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ctrl_ctrl_rx_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_we),
    .wd     (ctrl_ctrl_rx_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.ctrl_rx_en.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_ctrl_rx_en_qs)
  );

  //   F[targ_tx_en]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ctrl_targ_tx_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_we),
    .wd     (ctrl_targ_tx_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.targ_tx_en.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_targ_tx_en_qs)
  );

  //   F[targ_rx_en]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ctrl_targ_rx_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_we),
    .wd     (ctrl_targ_rx_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.targ_rx_en.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_targ_rx_en_qs)
  );

  //   F[hdr_ddr_en]: 8:8
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_ctrl_hdr_ddr_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_we),
    .wd     (ctrl_hdr_ddr_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.hdr_ddr_en.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_hdr_ddr_en_qs)
  );

  //   F[clkdiv]: 31:16
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_ctrl_clkdiv (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_we),
    .wd     (ctrl_clkdiv_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl.clkdiv.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_clkdiv_qs)
  );


  // R[status]: V(True)
  //   F[tx_idle]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_tx_idle (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.tx_idle.d),
    .qre    (reg2hw.status.tx_idle.re),
    .qe     (),
    .q      (reg2hw.status.tx_idle.q),
    .ds     (),
    .qs     (status_tx_idle_qs)
  );

  //   F[rx_idle]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rx_idle (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rx_idle.d),
    .qre    (reg2hw.status.rx_idle.re),
    .qe     (),
    .q      (reg2hw.status.rx_idle.q),
    .ds     (),
    .qs     (status_rx_idle_qs)
  );


  // R[phy_config]: V(False)
  //   F[scl_hk_en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_phy_config_scl_hk_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (phy_config_we),
    .wd     (phy_config_scl_hk_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.phy_config.scl_hk_en.q),
    .ds     (),

    // to register interface (read)
    .qs     (phy_config_scl_hk_en_qs)
  );

  //   F[sda_hk_en]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h1),
    .Mubi    (1'b0)
  ) u_phy_config_sda_hk_en (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (phy_config_we),
    .wd     (phy_config_sda_hk_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.phy_config.sda_hk_en.q),
    .ds     (),

    // to register interface (read)
    .qs     (phy_config_sda_hk_en_qs)
  );


  // R[ctrl_txbuf_config]: V(False)
  //   F[min_addr]: 15:0
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_ctrl_txbuf_config_min_addr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_txbuf_config_we),
    .wd     (ctrl_txbuf_config_min_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl_txbuf_config.min_addr.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_txbuf_config_min_addr_qs)
  );

  //   F[max_addr]: 31:16
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h7f),
    .Mubi    (1'b0)
  ) u_ctrl_txbuf_config_max_addr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_txbuf_config_we),
    .wd     (ctrl_txbuf_config_max_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl_txbuf_config.max_addr.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_txbuf_config_max_addr_qs)
  );


  // R[ctrl_txbuf_wptr]: V(False)
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_ctrl_txbuf_wptr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_txbuf_wptr_we),
    .wd     (ctrl_txbuf_wptr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl_txbuf_wptr.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_txbuf_wptr_qs)
  );


  // R[ctrl_txbuf_rptr]: V(False)
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_ctrl_txbuf_rptr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_txbuf_rptr_we),
    .wd     (ctrl_txbuf_rptr_wd),

    // from internal hardware
    .de     (hw2reg.ctrl_txbuf_rptr.de),
    .d      (hw2reg.ctrl_txbuf_rptr.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl_txbuf_rptr.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_txbuf_rptr_qs)
  );


  // R[ctrl_rxbuf_config]: V(False)
  //   F[min_addr]: 15:0
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h80),
    .Mubi    (1'b0)
  ) u_ctrl_rxbuf_config_min_addr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_rxbuf_config_we),
    .wd     (ctrl_rxbuf_config_min_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl_rxbuf_config.min_addr.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_rxbuf_config_min_addr_qs)
  );

  //   F[max_addr]: 31:16
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'hff),
    .Mubi    (1'b0)
  ) u_ctrl_rxbuf_config_max_addr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_rxbuf_config_we),
    .wd     (ctrl_rxbuf_config_max_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl_rxbuf_config.max_addr.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_rxbuf_config_max_addr_qs)
  );


  // R[ctrl_rxbuf_wptr]: V(False)
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h80),
    .Mubi    (1'b0)
  ) u_ctrl_rxbuf_wptr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_rxbuf_wptr_we),
    .wd     (ctrl_rxbuf_wptr_wd),

    // from internal hardware
    .de     (hw2reg.ctrl_rxbuf_wptr.de),
    .d      (hw2reg.ctrl_rxbuf_wptr.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl_rxbuf_wptr.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_rxbuf_wptr_qs)
  );


  // R[ctrl_rxbuf_rptr]: V(False)
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h80),
    .Mubi    (1'b0)
  ) u_ctrl_rxbuf_rptr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (ctrl_rxbuf_rptr_we),
    .wd     (ctrl_rxbuf_rptr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl_rxbuf_rptr.q),
    .ds     (),

    // to register interface (read)
    .qs     (ctrl_rxbuf_rptr_qs)
  );


  // R[targ_txbuf_config]: V(False)
  //   F[min_addr]: 15:0
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h100),
    .Mubi    (1'b0)
  ) u_targ_txbuf_config_min_addr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (targ_txbuf_config_we),
    .wd     (targ_txbuf_config_min_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.targ_txbuf_config.min_addr.q),
    .ds     (),

    // to register interface (read)
    .qs     (targ_txbuf_config_min_addr_qs)
  );

  //   F[max_addr]: 31:16
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h17f),
    .Mubi    (1'b0)
  ) u_targ_txbuf_config_max_addr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (targ_txbuf_config_we),
    .wd     (targ_txbuf_config_max_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.targ_txbuf_config.max_addr.q),
    .ds     (),

    // to register interface (read)
    .qs     (targ_txbuf_config_max_addr_qs)
  );


  // R[targ_txbuf_wptr]: V(False)
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h100),
    .Mubi    (1'b0)
  ) u_targ_txbuf_wptr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (targ_txbuf_wptr_we),
    .wd     (targ_txbuf_wptr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.targ_txbuf_wptr.q),
    .ds     (),

    // to register interface (read)
    .qs     (targ_txbuf_wptr_qs)
  );


  // R[targ_txbuf_rptr]: V(False)
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h100),
    .Mubi    (1'b0)
  ) u_targ_txbuf_rptr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (targ_txbuf_rptr_we),
    .wd     (targ_txbuf_rptr_wd),

    // from internal hardware
    .de     (hw2reg.targ_txbuf_rptr.de),
    .d      (hw2reg.targ_txbuf_rptr.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.targ_txbuf_rptr.q),
    .ds     (),

    // to register interface (read)
    .qs     (targ_txbuf_rptr_qs)
  );


  // R[targ_rxbuf_config]: V(False)
  //   F[min_addr]: 15:0
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h180),
    .Mubi    (1'b0)
  ) u_targ_rxbuf_config_min_addr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (targ_rxbuf_config_we),
    .wd     (targ_rxbuf_config_min_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.targ_rxbuf_config.min_addr.q),
    .ds     (),

    // to register interface (read)
    .qs     (targ_rxbuf_config_min_addr_qs)
  );

  //   F[max_addr]: 31:16
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h1ff),
    .Mubi    (1'b0)
  ) u_targ_rxbuf_config_max_addr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (targ_rxbuf_config_we),
    .wd     (targ_rxbuf_config_max_addr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.targ_rxbuf_config.max_addr.q),
    .ds     (),

    // to register interface (read)
    .qs     (targ_rxbuf_config_max_addr_qs)
  );


  // R[targ_rxbuf_wptr]: V(False)
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h180),
    .Mubi    (1'b0)
  ) u_targ_rxbuf_wptr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (targ_rxbuf_wptr_we),
    .wd     (targ_rxbuf_wptr_wd),

    // from internal hardware
    .de     (hw2reg.targ_rxbuf_wptr.de),
    .d      (hw2reg.targ_rxbuf_wptr.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.targ_rxbuf_wptr.q),
    .ds     (),

    // to register interface (read)
    .qs     (targ_rxbuf_wptr_qs)
  );


  // R[targ_rxbuf_rptr]: V(False)
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h180),
    .Mubi    (1'b0)
  ) u_targ_rxbuf_rptr (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (targ_rxbuf_rptr_we),
    .wd     (targ_rxbuf_rptr_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.targ_rxbuf_rptr.q),
    .ds     (),

    // to register interface (read)
    .qs     (targ_rxbuf_rptr_qs)
  );


  // R[buffer_status]: V(True)
  //   F[txlvl]: 7:0
  prim_subreg_ext #(
    .DW    (8)
  ) u_buffer_status_txlvl (
    .re     (buffer_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.buffer_status.txlvl.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (buffer_status_txlvl_qs)
  );

  //   F[rxlvl]: 23:16
  prim_subreg_ext #(
    .DW    (8)
  ) u_buffer_status_rxlvl (
    .re     (buffer_status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.buffer_status.rxlvl.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (buffer_status_rxlvl_qs)
  );


  // R[targ_addr_match]: V(False)
  //   F[addr0]: 6:0
  prim_subreg #(
    .DW      (7),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (7'h7f),
    .Mubi    (1'b0)
  ) u_targ_addr_match_addr0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (targ_addr_match_we),
    .wd     (targ_addr_match_addr0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.targ_addr_match.addr0.q),
    .ds     (),

    // to register interface (read)
    .qs     (targ_addr_match_addr0_qs)
  );

  //   F[addr1]: 14:8
  prim_subreg #(
    .DW      (7),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (7'h7f),
    .Mubi    (1'b0)
  ) u_targ_addr_match_addr1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (targ_addr_match_we),
    .wd     (targ_addr_match_addr1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.targ_addr_match.addr1.q),
    .ds     (),

    // to register interface (read)
    .qs     (targ_addr_match_addr1_qs)
  );


  // R[targ_addr_mask]: V(False)
  //   F[mask0]: 6:0
  prim_subreg #(
    .DW      (7),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (7'h0),
    .Mubi    (1'b0)
  ) u_targ_addr_mask_mask0 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (targ_addr_mask_we),
    .wd     (targ_addr_mask_mask0_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.targ_addr_mask.mask0.q),
    .ds     (),

    // to register interface (read)
    .qs     (targ_addr_mask_mask0_qs)
  );

  //   F[mask1]: 14:8
  prim_subreg #(
    .DW      (7),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (7'h0),
    .Mubi    (1'b0)
  ) u_targ_addr_mask_mask1 (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (targ_addr_mask_we),
    .wd     (targ_addr_mask_mask1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.targ_addr_mask.mask1.q),
    .ds     (),

    // to register interface (read)
    .qs     (targ_addr_mask_mask1_qs)
  );



  logic [21:0] addr_hit;
  top_racl_pkg::racl_role_vec_t racl_role_vec;
  top_racl_pkg::racl_role_t racl_role;

  logic [21:0] racl_addr_hit_read;
  logic [21:0] racl_addr_hit_write;

  if (EnableRacl) begin : gen_racl_role_logic
    // Retrieve RACL role from user bits and one-hot encode that for the comparison bitmap
    assign racl_role = top_racl_pkg::tlul_extract_racl_role_bits(tl_i.a_user.rsvd);

    prim_onehot_enc #(
      .OneHotWidth( $bits(top_racl_pkg::racl_role_vec_t) )
    ) u_racl_role_encode (
      .in_i ( racl_role     ),
      .en_i ( 1'b1          ),
      .out_o( racl_role_vec )
    );
  end else begin : gen_no_racl_role_logic
    assign racl_role     = '0;
    assign racl_role_vec = '0;
  end

  always_comb begin
    racl_addr_hit_read  = '0;
    racl_addr_hit_write = '0;
    addr_hit[ 0] = (reg_addr == I3C_INTR_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == I3C_INTR_ENABLE_OFFSET);
    addr_hit[ 2] = (reg_addr == I3C_INTR_TEST_OFFSET);
    addr_hit[ 3] = (reg_addr == I3C_ALERT_TEST_OFFSET);
    addr_hit[ 4] = (reg_addr == I3C_CTRL_OFFSET);
    addr_hit[ 5] = (reg_addr == I3C_STATUS_OFFSET);
    addr_hit[ 6] = (reg_addr == I3C_PHY_CONFIG_OFFSET);
    addr_hit[ 7] = (reg_addr == I3C_CTRL_TXBUF_CONFIG_OFFSET);
    addr_hit[ 8] = (reg_addr == I3C_CTRL_TXBUF_WPTR_OFFSET);
    addr_hit[ 9] = (reg_addr == I3C_CTRL_TXBUF_RPTR_OFFSET);
    addr_hit[10] = (reg_addr == I3C_CTRL_RXBUF_CONFIG_OFFSET);
    addr_hit[11] = (reg_addr == I3C_CTRL_RXBUF_WPTR_OFFSET);
    addr_hit[12] = (reg_addr == I3C_CTRL_RXBUF_RPTR_OFFSET);
    addr_hit[13] = (reg_addr == I3C_TARG_TXBUF_CONFIG_OFFSET);
    addr_hit[14] = (reg_addr == I3C_TARG_TXBUF_WPTR_OFFSET);
    addr_hit[15] = (reg_addr == I3C_TARG_TXBUF_RPTR_OFFSET);
    addr_hit[16] = (reg_addr == I3C_TARG_RXBUF_CONFIG_OFFSET);
    addr_hit[17] = (reg_addr == I3C_TARG_RXBUF_WPTR_OFFSET);
    addr_hit[18] = (reg_addr == I3C_TARG_RXBUF_RPTR_OFFSET);
    addr_hit[19] = (reg_addr == I3C_BUFFER_STATUS_OFFSET);
    addr_hit[20] = (reg_addr == I3C_TARG_ADDR_MATCH_OFFSET);
    addr_hit[21] = (reg_addr == I3C_TARG_ADDR_MASK_OFFSET);

    if (EnableRacl) begin : gen_racl_hit
      for (int unsigned slice_idx = 0; slice_idx < 22; slice_idx++) begin
        racl_addr_hit_read[slice_idx] =
            addr_hit[slice_idx] & (|(racl_policies_i[RaclPolicySelVec[slice_idx]].read_perm
                                      & racl_role_vec));
        racl_addr_hit_write[slice_idx] =
            addr_hit[slice_idx] & (|(racl_policies_i[RaclPolicySelVec[slice_idx]].write_perm
                                      & racl_role_vec));
      end
    end else begin : gen_no_racl
      racl_addr_hit_read  = addr_hit;
      racl_addr_hit_write = addr_hit;
    end
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;
  // A valid address hit, access, but failed the RACL check
  assign racl_error_o.valid = |addr_hit & ((reg_re & ~|racl_addr_hit_read) |
                                           (reg_we & ~|racl_addr_hit_write));
  assign racl_error_o.request_address = top_pkg::TL_AW'(reg_addr);
  assign racl_error_o.racl_role       = racl_role;
  assign racl_error_o.overflow        = 1'b0;

  if (EnableRacl) begin : gen_racl_log
    assign racl_error_o.ctn_uid     = top_racl_pkg::tlul_extract_ctn_uid_bits(tl_i.a_user.rsvd);
    assign racl_error_o.read_access = tl_i.a_opcode == tlul_pkg::Get;
  end else begin : gen_no_racl_log
    assign racl_error_o.ctn_uid     = '0;
    assign racl_error_o.read_access = 1'b0;
  end

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((racl_addr_hit_write[ 0] & (|(I3C_PERMIT[ 0] & ~reg_be))) |
               (racl_addr_hit_write[ 1] & (|(I3C_PERMIT[ 1] & ~reg_be))) |
               (racl_addr_hit_write[ 2] & (|(I3C_PERMIT[ 2] & ~reg_be))) |
               (racl_addr_hit_write[ 3] & (|(I3C_PERMIT[ 3] & ~reg_be))) |
               (racl_addr_hit_write[ 4] & (|(I3C_PERMIT[ 4] & ~reg_be))) |
               (racl_addr_hit_write[ 5] & (|(I3C_PERMIT[ 5] & ~reg_be))) |
               (racl_addr_hit_write[ 6] & (|(I3C_PERMIT[ 6] & ~reg_be))) |
               (racl_addr_hit_write[ 7] & (|(I3C_PERMIT[ 7] & ~reg_be))) |
               (racl_addr_hit_write[ 8] & (|(I3C_PERMIT[ 8] & ~reg_be))) |
               (racl_addr_hit_write[ 9] & (|(I3C_PERMIT[ 9] & ~reg_be))) |
               (racl_addr_hit_write[10] & (|(I3C_PERMIT[10] & ~reg_be))) |
               (racl_addr_hit_write[11] & (|(I3C_PERMIT[11] & ~reg_be))) |
               (racl_addr_hit_write[12] & (|(I3C_PERMIT[12] & ~reg_be))) |
               (racl_addr_hit_write[13] & (|(I3C_PERMIT[13] & ~reg_be))) |
               (racl_addr_hit_write[14] & (|(I3C_PERMIT[14] & ~reg_be))) |
               (racl_addr_hit_write[15] & (|(I3C_PERMIT[15] & ~reg_be))) |
               (racl_addr_hit_write[16] & (|(I3C_PERMIT[16] & ~reg_be))) |
               (racl_addr_hit_write[17] & (|(I3C_PERMIT[17] & ~reg_be))) |
               (racl_addr_hit_write[18] & (|(I3C_PERMIT[18] & ~reg_be))) |
               (racl_addr_hit_write[19] & (|(I3C_PERMIT[19] & ~reg_be))) |
               (racl_addr_hit_write[20] & (|(I3C_PERMIT[20] & ~reg_be))) |
               (racl_addr_hit_write[21] & (|(I3C_PERMIT[21] & ~reg_be)))));
  end

  // Generate write-enables
  assign intr_state_we = racl_addr_hit_write[0] & reg_we & !reg_error;

  assign intr_state_done_wd = reg_wdata[0];

  assign intr_state_error_wd = reg_wdata[1];
  assign intr_enable_we = racl_addr_hit_write[1] & reg_we & !reg_error;

  assign intr_enable_done_wd = reg_wdata[0];

  assign intr_enable_error_wd = reg_wdata[1];
  assign intr_test_we = racl_addr_hit_write[2] & reg_we & !reg_error;

  assign intr_test_done_wd = reg_wdata[0];

  assign intr_test_error_wd = reg_wdata[1];
  assign alert_test_we = racl_addr_hit_write[3] & reg_we & !reg_error;

  assign alert_test_wd = reg_wdata[0];
  assign ctrl_we = racl_addr_hit_write[4] & reg_we & !reg_error;

  assign ctrl_ctrl_tx_en_wd = reg_wdata[0];

  assign ctrl_ctrl_rx_en_wd = reg_wdata[1];

  assign ctrl_targ_tx_en_wd = reg_wdata[2];

  assign ctrl_targ_rx_en_wd = reg_wdata[3];

  assign ctrl_hdr_ddr_en_wd = reg_wdata[8];

  assign ctrl_clkdiv_wd = reg_wdata[31:16];
  assign status_re = racl_addr_hit_read[5] & reg_re & !reg_error;
  assign phy_config_we = racl_addr_hit_write[6] & reg_we & !reg_error;

  assign phy_config_scl_hk_en_wd = reg_wdata[0];

  assign phy_config_sda_hk_en_wd = reg_wdata[1];
  assign ctrl_txbuf_config_we = racl_addr_hit_write[7] & reg_we & !reg_error;

  assign ctrl_txbuf_config_min_addr_wd = reg_wdata[15:0];

  assign ctrl_txbuf_config_max_addr_wd = reg_wdata[31:16];
  assign ctrl_txbuf_wptr_we = racl_addr_hit_write[8] & reg_we & !reg_error;

  assign ctrl_txbuf_wptr_wd = reg_wdata[15:0];
  assign ctrl_txbuf_rptr_we = racl_addr_hit_write[9] & reg_we & !reg_error;

  assign ctrl_txbuf_rptr_wd = reg_wdata[15:0];
  assign ctrl_rxbuf_config_we = racl_addr_hit_write[10] & reg_we & !reg_error;

  assign ctrl_rxbuf_config_min_addr_wd = reg_wdata[15:0];

  assign ctrl_rxbuf_config_max_addr_wd = reg_wdata[31:16];
  assign ctrl_rxbuf_wptr_we = racl_addr_hit_write[11] & reg_we & !reg_error;

  assign ctrl_rxbuf_wptr_wd = reg_wdata[15:0];
  assign ctrl_rxbuf_rptr_we = racl_addr_hit_write[12] & reg_we & !reg_error;

  assign ctrl_rxbuf_rptr_wd = reg_wdata[15:0];
  assign targ_txbuf_config_we = racl_addr_hit_write[13] & reg_we & !reg_error;

  assign targ_txbuf_config_min_addr_wd = reg_wdata[15:0];

  assign targ_txbuf_config_max_addr_wd = reg_wdata[31:16];
  assign targ_txbuf_wptr_we = racl_addr_hit_write[14] & reg_we & !reg_error;

  assign targ_txbuf_wptr_wd = reg_wdata[15:0];
  assign targ_txbuf_rptr_we = racl_addr_hit_write[15] & reg_we & !reg_error;

  assign targ_txbuf_rptr_wd = reg_wdata[15:0];
  assign targ_rxbuf_config_we = racl_addr_hit_write[16] & reg_we & !reg_error;

  assign targ_rxbuf_config_min_addr_wd = reg_wdata[15:0];

  assign targ_rxbuf_config_max_addr_wd = reg_wdata[31:16];
  assign targ_rxbuf_wptr_we = racl_addr_hit_write[17] & reg_we & !reg_error;

  assign targ_rxbuf_wptr_wd = reg_wdata[15:0];
  assign targ_rxbuf_rptr_we = racl_addr_hit_write[18] & reg_we & !reg_error;

  assign targ_rxbuf_rptr_wd = reg_wdata[15:0];
  assign buffer_status_re = racl_addr_hit_read[19] & reg_re & !reg_error;
  assign targ_addr_match_we = racl_addr_hit_write[20] & reg_we & !reg_error;

  assign targ_addr_match_addr0_wd = reg_wdata[6:0];

  assign targ_addr_match_addr1_wd = reg_wdata[14:8];
  assign targ_addr_mask_we = racl_addr_hit_write[21] & reg_we & !reg_error;

  assign targ_addr_mask_mask0_wd = reg_wdata[6:0];

  assign targ_addr_mask_mask1_wd = reg_wdata[14:8];

  // Assign write-enables to checker logic vector.
  always_comb begin
    reg_we_check[0] = intr_state_we;
    reg_we_check[1] = intr_enable_we;
    reg_we_check[2] = intr_test_we;
    reg_we_check[3] = alert_test_we;
    reg_we_check[4] = ctrl_we;
    reg_we_check[5] = 1'b0;
    reg_we_check[6] = phy_config_we;
    reg_we_check[7] = ctrl_txbuf_config_we;
    reg_we_check[8] = ctrl_txbuf_wptr_we;
    reg_we_check[9] = ctrl_txbuf_rptr_we;
    reg_we_check[10] = ctrl_rxbuf_config_we;
    reg_we_check[11] = ctrl_rxbuf_wptr_we;
    reg_we_check[12] = ctrl_rxbuf_rptr_we;
    reg_we_check[13] = targ_txbuf_config_we;
    reg_we_check[14] = targ_txbuf_wptr_we;
    reg_we_check[15] = targ_txbuf_rptr_we;
    reg_we_check[16] = targ_rxbuf_config_we;
    reg_we_check[17] = targ_rxbuf_wptr_we;
    reg_we_check[18] = targ_rxbuf_rptr_we;
    reg_we_check[19] = 1'b0;
    reg_we_check[20] = targ_addr_match_we;
    reg_we_check[21] = targ_addr_mask_we;
  end

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      racl_addr_hit_read[0]: begin
        reg_rdata_next[0] = intr_state_done_qs;
        reg_rdata_next[1] = intr_state_error_qs;
      end

      racl_addr_hit_read[1]: begin
        reg_rdata_next[0] = intr_enable_done_qs;
        reg_rdata_next[1] = intr_enable_error_qs;
      end

      racl_addr_hit_read[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      racl_addr_hit_read[3]: begin
        reg_rdata_next[0] = '0;
      end

      racl_addr_hit_read[4]: begin
        reg_rdata_next[0] = ctrl_ctrl_tx_en_qs;
        reg_rdata_next[1] = ctrl_ctrl_rx_en_qs;
        reg_rdata_next[2] = ctrl_targ_tx_en_qs;
        reg_rdata_next[3] = ctrl_targ_rx_en_qs;
        reg_rdata_next[8] = ctrl_hdr_ddr_en_qs;
        reg_rdata_next[31:16] = ctrl_clkdiv_qs;
      end

      racl_addr_hit_read[5]: begin
        reg_rdata_next[0] = status_tx_idle_qs;
        reg_rdata_next[1] = status_rx_idle_qs;
      end

      racl_addr_hit_read[6]: begin
        reg_rdata_next[0] = phy_config_scl_hk_en_qs;
        reg_rdata_next[1] = phy_config_sda_hk_en_qs;
      end

      racl_addr_hit_read[7]: begin
        reg_rdata_next[15:0] = ctrl_txbuf_config_min_addr_qs;
        reg_rdata_next[31:16] = ctrl_txbuf_config_max_addr_qs;
      end

      racl_addr_hit_read[8]: begin
        reg_rdata_next[15:0] = ctrl_txbuf_wptr_qs;
      end

      racl_addr_hit_read[9]: begin
        reg_rdata_next[15:0] = ctrl_txbuf_rptr_qs;
      end

      racl_addr_hit_read[10]: begin
        reg_rdata_next[15:0] = ctrl_rxbuf_config_min_addr_qs;
        reg_rdata_next[31:16] = ctrl_rxbuf_config_max_addr_qs;
      end

      racl_addr_hit_read[11]: begin
        reg_rdata_next[15:0] = ctrl_rxbuf_wptr_qs;
      end

      racl_addr_hit_read[12]: begin
        reg_rdata_next[15:0] = ctrl_rxbuf_rptr_qs;
      end

      racl_addr_hit_read[13]: begin
        reg_rdata_next[15:0] = targ_txbuf_config_min_addr_qs;
        reg_rdata_next[31:16] = targ_txbuf_config_max_addr_qs;
      end

      racl_addr_hit_read[14]: begin
        reg_rdata_next[15:0] = targ_txbuf_wptr_qs;
      end

      racl_addr_hit_read[15]: begin
        reg_rdata_next[15:0] = targ_txbuf_rptr_qs;
      end

      racl_addr_hit_read[16]: begin
        reg_rdata_next[15:0] = targ_rxbuf_config_min_addr_qs;
        reg_rdata_next[31:16] = targ_rxbuf_config_max_addr_qs;
      end

      racl_addr_hit_read[17]: begin
        reg_rdata_next[15:0] = targ_rxbuf_wptr_qs;
      end

      racl_addr_hit_read[18]: begin
        reg_rdata_next[15:0] = targ_rxbuf_rptr_qs;
      end

      racl_addr_hit_read[19]: begin
        reg_rdata_next[7:0] = buffer_status_txlvl_qs;
        reg_rdata_next[23:16] = buffer_status_rxlvl_qs;
      end

      racl_addr_hit_read[20]: begin
        reg_rdata_next[6:0] = targ_addr_match_addr0_qs;
        reg_rdata_next[14:8] = targ_addr_match_addr1_qs;
      end

      racl_addr_hit_read[21]: begin
        reg_rdata_next[6:0] = targ_addr_mask_mask0_qs;
        reg_rdata_next[14:8] = targ_addr_mask_mask1_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;
  logic unused_policy_sel;
  assign unused_policy_sel = ^racl_policies_i;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
